// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERENUM_MYGAME_H_
#define FLATBUFFERS_GENERATED_MONSTERENUM_MYGAME_H_

#include "flatbuffers/flatbuffers.h"

namespace MyGame {

struct MonsterEnumTest;

enum ME_I8 {
  ME_I8_NONE = 0,
  ME_I8_MIN = ME_I8_NONE,
  ME_I8_MAX = ME_I8_NONE
};

inline const ME_I8 (&EnumValuesME_I8())[1] {
  static const ME_I8 values[] = {
    ME_I8_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_I8() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_I8(ME_I8 e) {
  if (e < ME_I8_NONE || e > ME_I8_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_I8()[index];
}

enum ME_U8 {
  ME_U8_NONE = 0,
  ME_U8_MIN = ME_U8_NONE,
  ME_U8_MAX = ME_U8_NONE
};

inline const ME_U8 (&EnumValuesME_U8())[1] {
  static const ME_U8 values[] = {
    ME_U8_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_U8() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_U8(ME_U8 e) {
  if (e < ME_U8_NONE || e > ME_U8_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_U8()[index];
}

enum ME_I16 {
  ME_I16_NONE = 0,
  ME_I16_MIN = ME_I16_NONE,
  ME_I16_MAX = ME_I16_NONE
};

inline const ME_I16 (&EnumValuesME_I16())[1] {
  static const ME_I16 values[] = {
    ME_I16_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_I16() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_I16(ME_I16 e) {
  if (e < ME_I16_NONE || e > ME_I16_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_I16()[index];
}

enum ME_U16 {
  ME_U16_NONE = 0,
  ME_U16_MIN = ME_U16_NONE,
  ME_U16_MAX = ME_U16_NONE
};

inline const ME_U16 (&EnumValuesME_U16())[1] {
  static const ME_U16 values[] = {
    ME_U16_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_U16() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_U16(ME_U16 e) {
  if (e < ME_U16_NONE || e > ME_U16_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_U16()[index];
}

enum ME_I32 {
  ME_I32_NONE = 0,
  ME_I32_MIN = ME_I32_NONE,
  ME_I32_MAX = ME_I32_NONE
};

inline const ME_I32 (&EnumValuesME_I32())[1] {
  static const ME_I32 values[] = {
    ME_I32_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_I32() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_I32(ME_I32 e) {
  if (e < ME_I32_NONE || e > ME_I32_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_I32()[index];
}

enum ME_U32 {
  ME_U32_NONE = 0,
  ME_U32_MIN = ME_U32_NONE,
  ME_U32_MAX = ME_U32_NONE
};

inline const ME_U32 (&EnumValuesME_U32())[1] {
  static const ME_U32 values[] = {
    ME_U32_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_U32() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_U32(ME_U32 e) {
  if (e < ME_U32_NONE || e > ME_U32_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_U32()[index];
}

enum ME_I64 : int64_t {
  ME_I64_NONE = 0,
  ME_I64_MIN = ME_I64_NONE,
  ME_I64_MAX = ME_I64_NONE
};

inline const ME_I64 (&EnumValuesME_I64())[1] {
  static const ME_I64 values[] = {
    ME_I64_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_I64() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_I64(ME_I64 e) {
  if (e < ME_I64_NONE || e > ME_I64_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_I64()[index];
}

enum ME_U64 : uint64_t {
  ME_U64_NONE = 0,
  ME_U64_MIN = ME_U64_NONE,
  ME_U64_MAX = ME_U64_NONE
};

inline const ME_U64 (&EnumValuesME_U64())[1] {
  static const ME_U64 values[] = {
    ME_U64_NONE
  };
  return values;
}

inline const char * const *EnumNamesME_U64() {
  static const char * const names[2] = {
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameME_U64(ME_U64 e) {
  if (e < ME_U64_NONE || e > ME_U64_NONE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesME_U64()[index];
}

///DOC: ALL_FLAGS = 13835058055282164099ULL
enum MEFU64_V0 : uint64_t {
  /// 1ULL
  MEFU64_V0_F00 = 1ULL,
  /// 2ULL
  MEFU64_V0_F01 = 2ULL,
  /// 128ULL
  MEFU64_V0_F07 = 128ULL,
  /// 256ULL
  MEFU64_V0_F08 = 256ULL,
  /// 4611686018427387904ULL
  MEFU64_V0_F62 = 4611686018427387904ULL,
  /// 9223372036854775808ULL
  MEFU64_V0_F63 = 9223372036854775808ULL,
  MEFU64_V0_NONE = 0,
  MEFU64_V0_ANY = 13835058055282164099ULL
};

inline const MEFU64_V0 (&EnumValuesMEFU64_V0())[6] {
  static const MEFU64_V0 values[] = {
    MEFU64_V0_F00,
    MEFU64_V0_F01,
    MEFU64_V0_F07,
    MEFU64_V0_F08,
    MEFU64_V0_F62,
    MEFU64_V0_F63
  };
  return values;
}

inline const char *EnumNameMEFU64_V0(MEFU64_V0 e) {
  switch (e) {
    case MEFU64_V0_F00: return "F00";
    case MEFU64_V0_F01: return "F01";
    case MEFU64_V0_F07: return "F07";
    case MEFU64_V0_F08: return "F08";
    case MEFU64_V0_F62: return "F62";
    case MEFU64_V0_F63: return "F63";
    default: return "";
  }
}

///DOC: ALL_FLAGS = 0xFFFFFFFFFFFFFFFF
enum MEFU64_V1 : uint64_t {
  MEFU64_V1_F00 = 1ULL,
  MEFU64_V1_F01 = 2ULL,
  MEFU64_V1_F02 = 4ULL,
  MEFU64_V1_F03 = 8ULL,
  MEFU64_V1_F04 = 16ULL,
  MEFU64_V1_F05 = 32ULL,
  MEFU64_V1_F06 = 64ULL,
  MEFU64_V1_F07 = 128ULL,
  MEFU64_V1_F08 = 256ULL,
  MEFU64_V1_F09 = 512ULL,
  MEFU64_V1_F10 = 1024ULL,
  MEFU64_V1_F11 = 2048ULL,
  MEFU64_V1_F12 = 4096ULL,
  MEFU64_V1_F13 = 8192ULL,
  MEFU64_V1_F14 = 16384ULL,
  MEFU64_V1_F15 = 32768ULL,
  MEFU64_V1_F16 = 65536ULL,
  MEFU64_V1_F17 = 131072ULL,
  MEFU64_V1_F18 = 262144ULL,
  MEFU64_V1_F19 = 524288ULL,
  MEFU64_V1_F20 = 1048576ULL,
  MEFU64_V1_F21 = 2097152ULL,
  MEFU64_V1_F22 = 4194304ULL,
  MEFU64_V1_F23 = 8388608ULL,
  MEFU64_V1_F24 = 16777216ULL,
  MEFU64_V1_F25 = 33554432ULL,
  MEFU64_V1_F26 = 67108864ULL,
  MEFU64_V1_F27 = 134217728ULL,
  MEFU64_V1_F28 = 268435456ULL,
  MEFU64_V1_F29 = 536870912ULL,
  MEFU64_V1_F30 = 1073741824ULL,
  MEFU64_V1_F31 = 2147483648ULL,
  MEFU64_V1_F32 = 4294967296ULL,
  MEFU64_V1_F33 = 8589934592ULL,
  MEFU64_V1_F34 = 17179869184ULL,
  MEFU64_V1_F35 = 34359738368ULL,
  MEFU64_V1_F36 = 68719476736ULL,
  MEFU64_V1_F37 = 137438953472ULL,
  MEFU64_V1_F38 = 274877906944ULL,
  MEFU64_V1_F39 = 549755813888ULL,
  MEFU64_V1_F40 = 1099511627776ULL,
  MEFU64_V1_F41 = 2199023255552ULL,
  MEFU64_V1_F42 = 4398046511104ULL,
  MEFU64_V1_F43 = 8796093022208ULL,
  MEFU64_V1_F44 = 17592186044416ULL,
  MEFU64_V1_F45 = 35184372088832ULL,
  MEFU64_V1_F46 = 70368744177664ULL,
  MEFU64_V1_F47 = 140737488355328ULL,
  MEFU64_V1_F48 = 281474976710656ULL,
  MEFU64_V1_F49 = 562949953421312ULL,
  MEFU64_V1_F50 = 1125899906842624ULL,
  MEFU64_V1_F51 = 2251799813685248ULL,
  MEFU64_V1_F52 = 4503599627370496ULL,
  MEFU64_V1_F53 = 9007199254740992ULL,
  MEFU64_V1_F54 = 18014398509481984ULL,
  MEFU64_V1_F55 = 36028797018963968ULL,
  MEFU64_V1_F56 = 72057594037927936ULL,
  MEFU64_V1_F57 = 144115188075855872ULL,
  MEFU64_V1_F58 = 288230376151711744ULL,
  MEFU64_V1_F59 = 576460752303423488ULL,
  MEFU64_V1_F60 = 1152921504606846976ULL,
  MEFU64_V1_F61 = 2305843009213693952ULL,
  MEFU64_V1_F62 = 4611686018427387904ULL,
  MEFU64_V1_F63 = 9223372036854775808ULL,
  MEFU64_V1_NONE = 0,
  MEFU64_V1_ANY = 18446744073709551615ULL
};

inline const MEFU64_V1 (&EnumValuesMEFU64_V1())[64] {
  static const MEFU64_V1 values[] = {
    MEFU64_V1_F00,
    MEFU64_V1_F01,
    MEFU64_V1_F02,
    MEFU64_V1_F03,
    MEFU64_V1_F04,
    MEFU64_V1_F05,
    MEFU64_V1_F06,
    MEFU64_V1_F07,
    MEFU64_V1_F08,
    MEFU64_V1_F09,
    MEFU64_V1_F10,
    MEFU64_V1_F11,
    MEFU64_V1_F12,
    MEFU64_V1_F13,
    MEFU64_V1_F14,
    MEFU64_V1_F15,
    MEFU64_V1_F16,
    MEFU64_V1_F17,
    MEFU64_V1_F18,
    MEFU64_V1_F19,
    MEFU64_V1_F20,
    MEFU64_V1_F21,
    MEFU64_V1_F22,
    MEFU64_V1_F23,
    MEFU64_V1_F24,
    MEFU64_V1_F25,
    MEFU64_V1_F26,
    MEFU64_V1_F27,
    MEFU64_V1_F28,
    MEFU64_V1_F29,
    MEFU64_V1_F30,
    MEFU64_V1_F31,
    MEFU64_V1_F32,
    MEFU64_V1_F33,
    MEFU64_V1_F34,
    MEFU64_V1_F35,
    MEFU64_V1_F36,
    MEFU64_V1_F37,
    MEFU64_V1_F38,
    MEFU64_V1_F39,
    MEFU64_V1_F40,
    MEFU64_V1_F41,
    MEFU64_V1_F42,
    MEFU64_V1_F43,
    MEFU64_V1_F44,
    MEFU64_V1_F45,
    MEFU64_V1_F46,
    MEFU64_V1_F47,
    MEFU64_V1_F48,
    MEFU64_V1_F49,
    MEFU64_V1_F50,
    MEFU64_V1_F51,
    MEFU64_V1_F52,
    MEFU64_V1_F53,
    MEFU64_V1_F54,
    MEFU64_V1_F55,
    MEFU64_V1_F56,
    MEFU64_V1_F57,
    MEFU64_V1_F58,
    MEFU64_V1_F59,
    MEFU64_V1_F60,
    MEFU64_V1_F61,
    MEFU64_V1_F62,
    MEFU64_V1_F63
  };
  return values;
}

inline const char *EnumNameMEFU64_V1(MEFU64_V1 e) {
  switch (e) {
    case MEFU64_V1_F00: return "F00";
    case MEFU64_V1_F01: return "F01";
    case MEFU64_V1_F02: return "F02";
    case MEFU64_V1_F03: return "F03";
    case MEFU64_V1_F04: return "F04";
    case MEFU64_V1_F05: return "F05";
    case MEFU64_V1_F06: return "F06";
    case MEFU64_V1_F07: return "F07";
    case MEFU64_V1_F08: return "F08";
    case MEFU64_V1_F09: return "F09";
    case MEFU64_V1_F10: return "F10";
    case MEFU64_V1_F11: return "F11";
    case MEFU64_V1_F12: return "F12";
    case MEFU64_V1_F13: return "F13";
    case MEFU64_V1_F14: return "F14";
    case MEFU64_V1_F15: return "F15";
    case MEFU64_V1_F16: return "F16";
    case MEFU64_V1_F17: return "F17";
    case MEFU64_V1_F18: return "F18";
    case MEFU64_V1_F19: return "F19";
    case MEFU64_V1_F20: return "F20";
    case MEFU64_V1_F21: return "F21";
    case MEFU64_V1_F22: return "F22";
    case MEFU64_V1_F23: return "F23";
    case MEFU64_V1_F24: return "F24";
    case MEFU64_V1_F25: return "F25";
    case MEFU64_V1_F26: return "F26";
    case MEFU64_V1_F27: return "F27";
    case MEFU64_V1_F28: return "F28";
    case MEFU64_V1_F29: return "F29";
    case MEFU64_V1_F30: return "F30";
    case MEFU64_V1_F31: return "F31";
    case MEFU64_V1_F32: return "F32";
    case MEFU64_V1_F33: return "F33";
    case MEFU64_V1_F34: return "F34";
    case MEFU64_V1_F35: return "F35";
    case MEFU64_V1_F36: return "F36";
    case MEFU64_V1_F37: return "F37";
    case MEFU64_V1_F38: return "F38";
    case MEFU64_V1_F39: return "F39";
    case MEFU64_V1_F40: return "F40";
    case MEFU64_V1_F41: return "F41";
    case MEFU64_V1_F42: return "F42";
    case MEFU64_V1_F43: return "F43";
    case MEFU64_V1_F44: return "F44";
    case MEFU64_V1_F45: return "F45";
    case MEFU64_V1_F46: return "F46";
    case MEFU64_V1_F47: return "F47";
    case MEFU64_V1_F48: return "F48";
    case MEFU64_V1_F49: return "F49";
    case MEFU64_V1_F50: return "F50";
    case MEFU64_V1_F51: return "F51";
    case MEFU64_V1_F52: return "F52";
    case MEFU64_V1_F53: return "F53";
    case MEFU64_V1_F54: return "F54";
    case MEFU64_V1_F55: return "F55";
    case MEFU64_V1_F56: return "F56";
    case MEFU64_V1_F57: return "F57";
    case MEFU64_V1_F58: return "F58";
    case MEFU64_V1_F59: return "F59";
    case MEFU64_V1_F60: return "F60";
    case MEFU64_V1_F61: return "F61";
    case MEFU64_V1_F62: return "F62";
    case MEFU64_V1_F63: return "F63";
    default: return "";
  }
}

///DOC: ALL_FLAGS = 49539U
enum MEFU16_V0 {
  MEFU16_V0_F00 = 1,
  MEFU16_V0_F01 = 2,
  MEFU16_V0_F07 = 128,
  MEFU16_V0_F08 = 256,
  MEFU16_V0_F14 = 16384,
  MEFU16_V0_F15 = 32768,
  MEFU16_V0_NONE = 0,
  MEFU16_V0_ANY = 49539
};

inline const MEFU16_V0 (&EnumValuesMEFU16_V0())[6] {
  static const MEFU16_V0 values[] = {
    MEFU16_V0_F00,
    MEFU16_V0_F01,
    MEFU16_V0_F07,
    MEFU16_V0_F08,
    MEFU16_V0_F14,
    MEFU16_V0_F15
  };
  return values;
}

inline const char *EnumNameMEFU16_V0(MEFU16_V0 e) {
  switch (e) {
    case MEFU16_V0_F00: return "F00";
    case MEFU16_V0_F01: return "F01";
    case MEFU16_V0_F07: return "F07";
    case MEFU16_V0_F08: return "F08";
    case MEFU16_V0_F14: return "F14";
    case MEFU16_V0_F15: return "F15";
    default: return "";
  }
}

enum MECI8_V0 {
  MECI8_V0_dn = -128,
  MECI8_V0_dn_p1 = -127,
  MECI8_V0_none = -1,
  MECI8_V0_zero = 0,
  MECI8_V0_one = 1,
  MECI8_V0_up = 127,
  MECI8_V0_MIN = MECI8_V0_dn,
  MECI8_V0_MAX = MECI8_V0_up
};

inline const MECI8_V0 (&EnumValuesMECI8_V0())[6] {
  static const MECI8_V0 values[] = {
    MECI8_V0_dn,
    MECI8_V0_dn_p1,
    MECI8_V0_none,
    MECI8_V0_zero,
    MECI8_V0_one,
    MECI8_V0_up
  };
  return values;
}

inline const char *EnumNameMECI8_V0(MECI8_V0 e) {
  switch (e) {
    case MECI8_V0_dn: return "dn";
    case MECI8_V0_dn_p1: return "dn_p1";
    case MECI8_V0_none: return "none";
    case MECI8_V0_zero: return "zero";
    case MECI8_V0_one: return "one";
    case MECI8_V0_up: return "up";
    default: return "";
  }
}

enum MECU8_V0 {
  MECU8_V0_dn = 0,
  MECU8_V0_one = 1,
  MECU8_V0_up = 255,
  MECU8_V0_MIN = MECU8_V0_dn,
  MECU8_V0_MAX = MECU8_V0_up
};

inline const MECU8_V0 (&EnumValuesMECU8_V0())[3] {
  static const MECU8_V0 values[] = {
    MECU8_V0_dn,
    MECU8_V0_one,
    MECU8_V0_up
  };
  return values;
}

inline const char *EnumNameMECU8_V0(MECU8_V0 e) {
  switch (e) {
    case MECU8_V0_dn: return "dn";
    case MECU8_V0_one: return "one";
    case MECU8_V0_up: return "up";
    default: return "";
  }
}

enum MECI16_V0 {
  MECI16_V0_dn = -32768,
  MECI16_V0_none = -1,
  MECI16_V0_zero = 0,
  MECI16_V0_one = 1,
  MECI16_V0_up = 32767,
  MECI16_V0_MIN = MECI16_V0_dn,
  MECI16_V0_MAX = MECI16_V0_up
};

inline const MECI16_V0 (&EnumValuesMECI16_V0())[5] {
  static const MECI16_V0 values[] = {
    MECI16_V0_dn,
    MECI16_V0_none,
    MECI16_V0_zero,
    MECI16_V0_one,
    MECI16_V0_up
  };
  return values;
}

inline const char *EnumNameMECI16_V0(MECI16_V0 e) {
  switch (e) {
    case MECI16_V0_dn: return "dn";
    case MECI16_V0_none: return "none";
    case MECI16_V0_zero: return "zero";
    case MECI16_V0_one: return "one";
    case MECI16_V0_up: return "up";
    default: return "";
  }
}

enum MECU16_V0 {
  MECU16_V0_dn = 0,
  MECU16_V0_one = 1,
  MECU16_V0_up = 65535,
  MECU16_V0_MIN = MECU16_V0_dn,
  MECU16_V0_MAX = MECU16_V0_up
};

inline const MECU16_V0 (&EnumValuesMECU16_V0())[3] {
  static const MECU16_V0 values[] = {
    MECU16_V0_dn,
    MECU16_V0_one,
    MECU16_V0_up
  };
  return values;
}

inline const char *EnumNameMECU16_V0(MECU16_V0 e) {
  switch (e) {
    case MECU16_V0_dn: return "dn";
    case MECU16_V0_one: return "one";
    case MECU16_V0_up: return "up";
    default: return "";
  }
}

enum MECI32_V0 {
  MECI32_V0_dn = (-2147483647 - 1),
  MECI32_V0_none = -1,
  MECI32_V0_zero = 0,
  MECI32_V0_one = 1,
  MECI32_V0_up = 2147483647,
  MECI32_V0_MIN = MECI32_V0_dn,
  MECI32_V0_MAX = MECI32_V0_up
};

inline const MECI32_V0 (&EnumValuesMECI32_V0())[5] {
  static const MECI32_V0 values[] = {
    MECI32_V0_dn,
    MECI32_V0_none,
    MECI32_V0_zero,
    MECI32_V0_one,
    MECI32_V0_up
  };
  return values;
}

inline const char *EnumNameMECI32_V0(MECI32_V0 e) {
  switch (e) {
    case MECI32_V0_dn: return "dn";
    case MECI32_V0_none: return "none";
    case MECI32_V0_zero: return "zero";
    case MECI32_V0_one: return "one";
    case MECI32_V0_up: return "up";
    default: return "";
  }
}

enum MECU32_V0 {
  MECU32_V0_dn = 0,
  MECU32_V0_one = 1,
  MECU32_V0_up = 4294967295,
  MECU32_V0_MIN = MECU32_V0_dn,
  MECU32_V0_MAX = MECU32_V0_up
};

inline const MECU32_V0 (&EnumValuesMECU32_V0())[3] {
  static const MECU32_V0 values[] = {
    MECU32_V0_dn,
    MECU32_V0_one,
    MECU32_V0_up
  };
  return values;
}

inline const char *EnumNameMECU32_V0(MECU32_V0 e) {
  switch (e) {
    case MECU32_V0_dn: return "dn";
    case MECU32_V0_one: return "one";
    case MECU32_V0_up: return "up";
    default: return "";
  }
}

enum MECI64_V0 : int64_t {
  MECI64_V0_dn = (-9223372036854775807LL - 1LL),
  MECI64_V0_dn_p1 = -9223372036854775807LL,
  MECI64_V0_none = -1LL,
  MECI64_V0_zero = 0,
  MECI64_V0_one = 1LL,
  MECI64_V0_up = 9223372036854775807LL,
  MECI64_V0_MIN = MECI64_V0_dn,
  MECI64_V0_MAX = MECI64_V0_up
};

inline const MECI64_V0 (&EnumValuesMECI64_V0())[6] {
  static const MECI64_V0 values[] = {
    MECI64_V0_dn,
    MECI64_V0_dn_p1,
    MECI64_V0_none,
    MECI64_V0_zero,
    MECI64_V0_one,
    MECI64_V0_up
  };
  return values;
}

inline const char *EnumNameMECI64_V0(MECI64_V0 e) {
  switch (e) {
    case MECI64_V0_dn: return "dn";
    case MECI64_V0_dn_p1: return "dn_p1";
    case MECI64_V0_none: return "none";
    case MECI64_V0_zero: return "zero";
    case MECI64_V0_one: return "one";
    case MECI64_V0_up: return "up";
    default: return "";
  }
}

enum MECU64_V0 : uint64_t {
  MECU64_V0_dn = 0,
  MECU64_V0_one = 1ULL,
  MECU64_V0_up = 18446744073709551615ULL,
  MECU64_V0_MIN = MECU64_V0_dn,
  MECU64_V0_MAX = MECU64_V0_up
};

inline const MECU64_V0 (&EnumValuesMECU64_V0())[3] {
  static const MECU64_V0 values[] = {
    MECU64_V0_dn,
    MECU64_V0_one,
    MECU64_V0_up
  };
  return values;
}

inline const char *EnumNameMECU64_V0(MECU64_V0 e) {
  switch (e) {
    case MECU64_V0_dn: return "dn";
    case MECU64_V0_one: return "one";
    case MECU64_V0_up: return "up";
    default: return "";
  }
}

enum MerchantCanChanged {
  MerchantCanChanged_x = 1,
  MerchantCanChanged_y = 2,
  MerchantCanChanged_z = 3,
  MerchantCanChanged_v = 4,
  MerchantCanChanged_s = 5,
  MerchantCanChanged_MIN = MerchantCanChanged_x,
  MerchantCanChanged_MAX = MerchantCanChanged_s
};

inline const MerchantCanChanged (&EnumValuesMerchantCanChanged())[5] {
  static const MerchantCanChanged values[] = {
    MerchantCanChanged_x,
    MerchantCanChanged_y,
    MerchantCanChanged_z,
    MerchantCanChanged_v,
    MerchantCanChanged_s
  };
  return values;
}

inline const char * const *EnumNamesMerchantCanChanged() {
  static const char * const names[6] = {
    "x",
    "y",
    "z",
    "v",
    "s",
    nullptr
  };
  return names;
}

inline const char *EnumNameMerchantCanChanged(MerchantCanChanged e) {
  if (e < MerchantCanChanged_x || e > MerchantCanChanged_s) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(MerchantCanChanged_x);
  return EnumNamesMerchantCanChanged()[index];
}

struct MonsterEnumTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INT8_MIN = 4,
    VT_INT8_MAX = 6,
    VT_INT16_MIN = 8,
    VT_INT16_MAX = 10,
    VT_INT32_MIN = 12,
    VT_INT32_MAX = 14,
    VT_INT64_MIN = 16,
    VT_INT64_MAX = 18,
    VT_UINT8_MAX = 20,
    VT_UINT16_MAX = 22,
    VT_UINT32_MAX = 24,
    VT_UINT64_MAX = 26,
    VT_EMPTY_I8 = 28,
    VT_EMPTY_U8 = 30,
    VT_EMPTY_I16 = 32,
    VT_EMPTY_U16 = 34,
    VT_EMPTY_I32 = 36,
    VT_EMPTY_U32 = 38,
    VT_EMPTY_I64 = 40,
    VT_EMPTY_U64 = 42,
    VT_U64_EF = 44,
    VT_U64_EC = 46,
    VT_I64_EC1 = 48,
    VT_I64_EC2 = 50,
    VT_U64 = 52,
    VT_I64 = 54,
    VT_U16_EF = 56,
    VT_U8_EC = 58,
    VT_I8_EC1 = 60,
    VT_I8_EC2 = 62,
    VT_FIELDS_MERCHANT_UPDATE = 64
  };
  int8_t int8_min() const {
    return GetField<int8_t>(VT_INT8_MIN, -128);
  }
  int8_t int8_max() const {
    return GetField<int8_t>(VT_INT8_MAX, 127);
  }
  int16_t int16_min() const {
    return GetField<int16_t>(VT_INT16_MIN, -32768);
  }
  int16_t int16_max() const {
    return GetField<int16_t>(VT_INT16_MAX, 32767);
  }
  int32_t int32_min() const {
    return GetField<int32_t>(VT_INT32_MIN, (-2147483647 - 1));
  }
  int32_t int32_max() const {
    return GetField<int32_t>(VT_INT32_MAX, 2147483647);
  }
  int64_t int64_min() const {
    return GetField<int64_t>(VT_INT64_MIN, (-9223372036854775807LL - 1LL));
  }
  int64_t int64_max() const {
    return GetField<int64_t>(VT_INT64_MAX, 9223372036854775807LL);
  }
  uint8_t uint8_max() const {
    return GetField<uint8_t>(VT_UINT8_MAX, 255);
  }
  uint16_t uint16_max() const {
    return GetField<uint16_t>(VT_UINT16_MAX, 65535);
  }
  uint32_t uint32_max() const {
    return GetField<uint32_t>(VT_UINT32_MAX, 4294967295);
  }
  uint64_t uint64_max() const {
    return GetField<uint64_t>(VT_UINT64_MAX, 18446744073709551615ULL);
  }
  ME_I8 empty_i8() const {
    return static_cast<ME_I8>(GetField<int8_t>(VT_EMPTY_I8, 0));
  }
  ME_U8 empty_u8() const {
    return static_cast<ME_U8>(GetField<uint8_t>(VT_EMPTY_U8, 0));
  }
  ME_I16 empty_i16() const {
    return static_cast<ME_I16>(GetField<int16_t>(VT_EMPTY_I16, 0));
  }
  ME_U16 empty_u16() const {
    return static_cast<ME_U16>(GetField<uint16_t>(VT_EMPTY_U16, 0));
  }
  ME_I32 empty_i32() const {
    return static_cast<ME_I32>(GetField<int32_t>(VT_EMPTY_I32, 0));
  }
  ME_U32 empty_u32() const {
    return static_cast<ME_U32>(GetField<uint32_t>(VT_EMPTY_U32, 0));
  }
  ME_I64 empty_i64() const {
    return static_cast<ME_I64>(GetField<int64_t>(VT_EMPTY_I64, 0));
  }
  ME_U64 empty_u64() const {
    return static_cast<ME_U64>(GetField<uint64_t>(VT_EMPTY_U64, 0));
  }
  MEFU64_V0 u64_ef() const {
    return static_cast<MEFU64_V0>(GetField<uint64_t>(VT_U64_EF, 9223372036854776192ULL));
  }
  MECU64_V0 u64_ec() const {
    return static_cast<MECU64_V0>(GetField<uint64_t>(VT_U64_EC, 18446744073709551615ULL));
  }
  MECI64_V0 i64_ec1() const {
    return static_cast<MECI64_V0>(GetField<int64_t>(VT_I64_EC1, -9223372036854775807LL));
  }
  MECI64_V0 i64_ec2() const {
    return static_cast<MECI64_V0>(GetField<int64_t>(VT_I64_EC2, 9223372036854775807LL));
  }
  uint64_t u64() const {
    return GetField<uint64_t>(VT_U64, 9223372036854775809ULL);
  }
  int64_t i64() const {
    return GetField<int64_t>(VT_I64, 129LL);
  }
  MEFU16_V0 u16_ef() const {
    return static_cast<MEFU16_V0>(GetField<uint16_t>(VT_U16_EF, 33024));
  }
  MECU8_V0 u8_ec() const {
    return static_cast<MECU8_V0>(GetField<uint8_t>(VT_U8_EC, 255));
  }
  MECI8_V0 i8_ec1() const {
    return static_cast<MECI8_V0>(GetField<int8_t>(VT_I8_EC1, -127));
  }
  MECI8_V0 i8_ec2() const {
    return static_cast<MECI8_V0>(GetField<int8_t>(VT_I8_EC2, 127));
  }
  const flatbuffers::Vector<int8_t> *fields_merchant_update() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_FIELDS_MERCHANT_UPDATE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_INT8_MIN) &&
           VerifyField<int8_t>(verifier, VT_INT8_MAX) &&
           VerifyField<int16_t>(verifier, VT_INT16_MIN) &&
           VerifyField<int16_t>(verifier, VT_INT16_MAX) &&
           VerifyField<int32_t>(verifier, VT_INT32_MIN) &&
           VerifyField<int32_t>(verifier, VT_INT32_MAX) &&
           VerifyField<int64_t>(verifier, VT_INT64_MIN) &&
           VerifyField<int64_t>(verifier, VT_INT64_MAX) &&
           VerifyField<uint8_t>(verifier, VT_UINT8_MAX) &&
           VerifyField<uint16_t>(verifier, VT_UINT16_MAX) &&
           VerifyField<uint32_t>(verifier, VT_UINT32_MAX) &&
           VerifyField<uint64_t>(verifier, VT_UINT64_MAX) &&
           VerifyField<int8_t>(verifier, VT_EMPTY_I8) &&
           VerifyField<uint8_t>(verifier, VT_EMPTY_U8) &&
           VerifyField<int16_t>(verifier, VT_EMPTY_I16) &&
           VerifyField<uint16_t>(verifier, VT_EMPTY_U16) &&
           VerifyField<int32_t>(verifier, VT_EMPTY_I32) &&
           VerifyField<uint32_t>(verifier, VT_EMPTY_U32) &&
           VerifyField<int64_t>(verifier, VT_EMPTY_I64) &&
           VerifyField<uint64_t>(verifier, VT_EMPTY_U64) &&
           VerifyField<uint64_t>(verifier, VT_U64_EF) &&
           VerifyField<uint64_t>(verifier, VT_U64_EC) &&
           VerifyField<int64_t>(verifier, VT_I64_EC1) &&
           VerifyField<int64_t>(verifier, VT_I64_EC2) &&
           VerifyField<uint64_t>(verifier, VT_U64) &&
           VerifyField<int64_t>(verifier, VT_I64) &&
           VerifyField<uint16_t>(verifier, VT_U16_EF) &&
           VerifyField<uint8_t>(verifier, VT_U8_EC) &&
           VerifyField<int8_t>(verifier, VT_I8_EC1) &&
           VerifyField<int8_t>(verifier, VT_I8_EC2) &&
           VerifyOffset(verifier, VT_FIELDS_MERCHANT_UPDATE) &&
           verifier.VerifyVector(fields_merchant_update()) &&
           verifier.EndTable();
  }
};

struct MonsterEnumTestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_int8_min(int8_t int8_min) {
    fbb_.AddElement<int8_t>(MonsterEnumTest::VT_INT8_MIN, int8_min, -128);
  }
  void add_int8_max(int8_t int8_max) {
    fbb_.AddElement<int8_t>(MonsterEnumTest::VT_INT8_MAX, int8_max, 127);
  }
  void add_int16_min(int16_t int16_min) {
    fbb_.AddElement<int16_t>(MonsterEnumTest::VT_INT16_MIN, int16_min, -32768);
  }
  void add_int16_max(int16_t int16_max) {
    fbb_.AddElement<int16_t>(MonsterEnumTest::VT_INT16_MAX, int16_max, 32767);
  }
  void add_int32_min(int32_t int32_min) {
    fbb_.AddElement<int32_t>(MonsterEnumTest::VT_INT32_MIN, int32_min, (-2147483647 - 1));
  }
  void add_int32_max(int32_t int32_max) {
    fbb_.AddElement<int32_t>(MonsterEnumTest::VT_INT32_MAX, int32_max, 2147483647);
  }
  void add_int64_min(int64_t int64_min) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_INT64_MIN, int64_min, (-9223372036854775807LL - 1LL));
  }
  void add_int64_max(int64_t int64_max) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_INT64_MAX, int64_max, 9223372036854775807LL);
  }
  void add_uint8_max(uint8_t uint8_max) {
    fbb_.AddElement<uint8_t>(MonsterEnumTest::VT_UINT8_MAX, uint8_max, 255);
  }
  void add_uint16_max(uint16_t uint16_max) {
    fbb_.AddElement<uint16_t>(MonsterEnumTest::VT_UINT16_MAX, uint16_max, 65535);
  }
  void add_uint32_max(uint32_t uint32_max) {
    fbb_.AddElement<uint32_t>(MonsterEnumTest::VT_UINT32_MAX, uint32_max, 4294967295);
  }
  void add_uint64_max(uint64_t uint64_max) {
    fbb_.AddElement<uint64_t>(MonsterEnumTest::VT_UINT64_MAX, uint64_max, 18446744073709551615ULL);
  }
  void add_empty_i8(ME_I8 empty_i8) {
    fbb_.AddElement<int8_t>(MonsterEnumTest::VT_EMPTY_I8, static_cast<int8_t>(empty_i8), 0);
  }
  void add_empty_u8(ME_U8 empty_u8) {
    fbb_.AddElement<uint8_t>(MonsterEnumTest::VT_EMPTY_U8, static_cast<uint8_t>(empty_u8), 0);
  }
  void add_empty_i16(ME_I16 empty_i16) {
    fbb_.AddElement<int16_t>(MonsterEnumTest::VT_EMPTY_I16, static_cast<int16_t>(empty_i16), 0);
  }
  void add_empty_u16(ME_U16 empty_u16) {
    fbb_.AddElement<uint16_t>(MonsterEnumTest::VT_EMPTY_U16, static_cast<uint16_t>(empty_u16), 0);
  }
  void add_empty_i32(ME_I32 empty_i32) {
    fbb_.AddElement<int32_t>(MonsterEnumTest::VT_EMPTY_I32, static_cast<int32_t>(empty_i32), 0);
  }
  void add_empty_u32(ME_U32 empty_u32) {
    fbb_.AddElement<uint32_t>(MonsterEnumTest::VT_EMPTY_U32, static_cast<uint32_t>(empty_u32), 0);
  }
  void add_empty_i64(ME_I64 empty_i64) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_EMPTY_I64, static_cast<int64_t>(empty_i64), 0);
  }
  void add_empty_u64(ME_U64 empty_u64) {
    fbb_.AddElement<uint64_t>(MonsterEnumTest::VT_EMPTY_U64, static_cast<uint64_t>(empty_u64), 0);
  }
  void add_u64_ef(MEFU64_V0 u64_ef) {
    fbb_.AddElement<uint64_t>(MonsterEnumTest::VT_U64_EF, static_cast<uint64_t>(u64_ef), 9223372036854776192ULL);
  }
  void add_u64_ec(MECU64_V0 u64_ec) {
    fbb_.AddElement<uint64_t>(MonsterEnumTest::VT_U64_EC, static_cast<uint64_t>(u64_ec), 18446744073709551615ULL);
  }
  void add_i64_ec1(MECI64_V0 i64_ec1) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_I64_EC1, static_cast<int64_t>(i64_ec1), -9223372036854775807LL);
  }
  void add_i64_ec2(MECI64_V0 i64_ec2) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_I64_EC2, static_cast<int64_t>(i64_ec2), 9223372036854775807LL);
  }
  void add_u64(uint64_t u64) {
    fbb_.AddElement<uint64_t>(MonsterEnumTest::VT_U64, u64, 9223372036854775809ULL);
  }
  void add_i64(int64_t i64) {
    fbb_.AddElement<int64_t>(MonsterEnumTest::VT_I64, i64, 129LL);
  }
  void add_u16_ef(MEFU16_V0 u16_ef) {
    fbb_.AddElement<uint16_t>(MonsterEnumTest::VT_U16_EF, static_cast<uint16_t>(u16_ef), 33024);
  }
  void add_u8_ec(MECU8_V0 u8_ec) {
    fbb_.AddElement<uint8_t>(MonsterEnumTest::VT_U8_EC, static_cast<uint8_t>(u8_ec), 255);
  }
  void add_i8_ec1(MECI8_V0 i8_ec1) {
    fbb_.AddElement<int8_t>(MonsterEnumTest::VT_I8_EC1, static_cast<int8_t>(i8_ec1), -127);
  }
  void add_i8_ec2(MECI8_V0 i8_ec2) {
    fbb_.AddElement<int8_t>(MonsterEnumTest::VT_I8_EC2, static_cast<int8_t>(i8_ec2), 127);
  }
  void add_fields_merchant_update(flatbuffers::Offset<flatbuffers::Vector<int8_t>> fields_merchant_update) {
    fbb_.AddOffset(MonsterEnumTest::VT_FIELDS_MERCHANT_UPDATE, fields_merchant_update);
  }
  explicit MonsterEnumTestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterEnumTestBuilder &operator=(const MonsterEnumTestBuilder &);
  flatbuffers::Offset<MonsterEnumTest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MonsterEnumTest>(end);
    return o;
  }
};

inline flatbuffers::Offset<MonsterEnumTest> CreateMonsterEnumTest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t int8_min = -128,
    int8_t int8_max = 127,
    int16_t int16_min = -32768,
    int16_t int16_max = 32767,
    int32_t int32_min = (-2147483647 - 1),
    int32_t int32_max = 2147483647,
    int64_t int64_min = (-9223372036854775807LL - 1LL),
    int64_t int64_max = 9223372036854775807LL,
    uint8_t uint8_max = 255,
    uint16_t uint16_max = 65535,
    uint32_t uint32_max = 4294967295,
    uint64_t uint64_max = 18446744073709551615ULL,
    ME_I8 empty_i8 = ME_I8_NONE,
    ME_U8 empty_u8 = ME_U8_NONE,
    ME_I16 empty_i16 = ME_I16_NONE,
    ME_U16 empty_u16 = ME_U16_NONE,
    ME_I32 empty_i32 = ME_I32_NONE,
    ME_U32 empty_u32 = ME_U32_NONE,
    ME_I64 empty_i64 = ME_I64_NONE,
    ME_U64 empty_u64 = ME_U64_NONE,
    MEFU64_V0 u64_ef = static_cast<MEFU64_V0>(9223372036854776192ULL),
    MECU64_V0 u64_ec = MECU64_V0_up,
    MECI64_V0 i64_ec1 = MECI64_V0_dn_p1,
    MECI64_V0 i64_ec2 = MECI64_V0_up,
    uint64_t u64 = 9223372036854775809ULL,
    int64_t i64 = 129LL,
    MEFU16_V0 u16_ef = static_cast<MEFU16_V0>(33024),
    MECU8_V0 u8_ec = MECU8_V0_up,
    MECI8_V0 i8_ec1 = MECI8_V0_dn_p1,
    MECI8_V0 i8_ec2 = MECI8_V0_up,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> fields_merchant_update = 0) {
  MonsterEnumTestBuilder builder_(_fbb);
  builder_.add_i64(i64);
  builder_.add_u64(u64);
  builder_.add_i64_ec2(i64_ec2);
  builder_.add_i64_ec1(i64_ec1);
  builder_.add_u64_ec(u64_ec);
  builder_.add_u64_ef(u64_ef);
  builder_.add_empty_u64(empty_u64);
  builder_.add_empty_i64(empty_i64);
  builder_.add_uint64_max(uint64_max);
  builder_.add_int64_max(int64_max);
  builder_.add_int64_min(int64_min);
  builder_.add_fields_merchant_update(fields_merchant_update);
  builder_.add_empty_u32(empty_u32);
  builder_.add_empty_i32(empty_i32);
  builder_.add_uint32_max(uint32_max);
  builder_.add_int32_max(int32_max);
  builder_.add_int32_min(int32_min);
  builder_.add_u16_ef(u16_ef);
  builder_.add_empty_u16(empty_u16);
  builder_.add_empty_i16(empty_i16);
  builder_.add_uint16_max(uint16_max);
  builder_.add_int16_max(int16_max);
  builder_.add_int16_min(int16_min);
  builder_.add_i8_ec2(i8_ec2);
  builder_.add_i8_ec1(i8_ec1);
  builder_.add_u8_ec(u8_ec);
  builder_.add_empty_u8(empty_u8);
  builder_.add_empty_i8(empty_i8);
  builder_.add_uint8_max(uint8_max);
  builder_.add_int8_max(int8_max);
  builder_.add_int8_min(int8_min);
  return builder_.Finish();
}

inline flatbuffers::Offset<MonsterEnumTest> CreateMonsterEnumTestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t int8_min = -128,
    int8_t int8_max = 127,
    int16_t int16_min = -32768,
    int16_t int16_max = 32767,
    int32_t int32_min = (-2147483647 - 1),
    int32_t int32_max = 2147483647,
    int64_t int64_min = (-9223372036854775807LL - 1LL),
    int64_t int64_max = 9223372036854775807LL,
    uint8_t uint8_max = 255,
    uint16_t uint16_max = 65535,
    uint32_t uint32_max = 4294967295,
    uint64_t uint64_max = 18446744073709551615ULL,
    ME_I8 empty_i8 = ME_I8_NONE,
    ME_U8 empty_u8 = ME_U8_NONE,
    ME_I16 empty_i16 = ME_I16_NONE,
    ME_U16 empty_u16 = ME_U16_NONE,
    ME_I32 empty_i32 = ME_I32_NONE,
    ME_U32 empty_u32 = ME_U32_NONE,
    ME_I64 empty_i64 = ME_I64_NONE,
    ME_U64 empty_u64 = ME_U64_NONE,
    MEFU64_V0 u64_ef = static_cast<MEFU64_V0>(9223372036854776192ULL),
    MECU64_V0 u64_ec = MECU64_V0_up,
    MECI64_V0 i64_ec1 = MECI64_V0_dn_p1,
    MECI64_V0 i64_ec2 = MECI64_V0_up,
    uint64_t u64 = 9223372036854775809ULL,
    int64_t i64 = 129LL,
    MEFU16_V0 u16_ef = static_cast<MEFU16_V0>(33024),
    MECU8_V0 u8_ec = MECU8_V0_up,
    MECI8_V0 i8_ec1 = MECI8_V0_dn_p1,
    MECI8_V0 i8_ec2 = MECI8_V0_up,
    const std::vector<int8_t> *fields_merchant_update = nullptr) {
  auto fields_merchant_update__ = fields_merchant_update ? _fbb.CreateVector<int8_t>(*fields_merchant_update) : 0;
  return MyGame::CreateMonsterEnumTest(
      _fbb,
      int8_min,
      int8_max,
      int16_min,
      int16_max,
      int32_min,
      int32_max,
      int64_min,
      int64_max,
      uint8_max,
      uint16_max,
      uint32_max,
      uint64_max,
      empty_i8,
      empty_u8,
      empty_i16,
      empty_u16,
      empty_i32,
      empty_u32,
      empty_i64,
      empty_u64,
      u64_ef,
      u64_ec,
      i64_ec1,
      i64_ec2,
      u64,
      i64,
      u16_ef,
      u8_ec,
      i8_ec1,
      i8_ec2,
      fields_merchant_update__);
}

}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_MONSTERENUM_MYGAME_H_
