// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace test {

struct Colors;
struct ColorsT;

inline const flatbuffers::TypeTable *ColorsTypeTable();

enum class Color : int8_t {
  Red = 0,
  Green = 1,
  Blue = 2,
  MIN = Red,
  MAX = Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color::Red,
    Color::Green,
    Color::Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

// Generated code:
struct ColorVecOffset final
  : public flatbuffers::Offset<flatbuffers::Vector<int8_t>> {
  ColorVecOffset(flatbuffers::uoffset_t _o) : Offset(_o) {}
  ColorVecOffset(Offset<flatbuffers::Vector<int8_t>> _o) : Offset(_o) {}
  // generate this if Color is scoped enum
  ColorVecOffset(Offset<flatbuffers::Vector<Color>> _o) : Offset(_o.o) {
    static_assert(
      std::is_same<std::underlying_type<Color>::type, int8_t>::value,
      "invalid declaration");
  }

  flatbuffers::Offset<flatbuffers::Vector<int8_t>> underlying() const {
    return o;
  }
};

inline const char *EnumNameColor(Color e) {
  if (e < Color::Red || e > Color::Blue) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColor()[index];
}

struct ColorsT : public flatbuffers::NativeTable {
  typedef Colors TableType;
  std::vector<Color> color_values;
  ColorsT() {
  }
};

struct Colors FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ColorsT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ColorsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLOR_VALUES = 4
  };
  const flatbuffers::Vector<int8_t> *color_values() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_COLOR_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COLOR_VALUES) &&
           verifier.VerifyVector(color_values()) &&
           verifier.EndTable();
  }
  ColorsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ColorsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Colors> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ColorsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ColorsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color_values(ColorVecOffset color_values) {
    fbb_.AddOffset(Colors::VT_COLOR_VALUES, color_values.underlying());
  }
  explicit ColorsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ColorsBuilder &operator=(const ColorsBuilder &);
  flatbuffers::Offset<Colors> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Colors>(end);
    return o;
  }
};

inline flatbuffers::Offset<Colors> CreateColors(
    flatbuffers::FlatBufferBuilder &_fbb,
    ColorVecOffset color_values = 0) {
  ColorsBuilder builder_(_fbb);
  builder_.add_color_values(color_values);
  return builder_.Finish();
}

inline flatbuffers::Offset<Colors> CreateColorsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *color_values = nullptr) {
  auto color_values__ = color_values ? _fbb.CreateVector<int8_t>(*color_values) : 0;
  return test::CreateColors(
      _fbb,
      color_values__);
}

flatbuffers::Offset<Colors> CreateColors(flatbuffers::FlatBufferBuilder &_fbb, const ColorsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ColorsT *Colors::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ColorsT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Colors::UnPackTo(ColorsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = color_values(); if (_e) { _o->color_values.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->color_values[_i] = static_cast<Color>(_e->Get(_i)); } } };
}

inline flatbuffers::Offset<Colors> Colors::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ColorsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateColors(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Colors> CreateColors(flatbuffers::FlatBufferBuilder &_fbb, const ColorsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ColorsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _color_values = _o->color_values.size() ? _fbb.CreateVectorScalarCast<int8_t>(flatbuffers::data(_o->color_values), _o->color_values.size()) : 0;
  return test::CreateColors(
      _fbb,
      _color_values);
}

inline const flatbuffers::TypeTable *ColorTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const char * const names[] = {
    "Red",
    "Green",
    "Blue"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ColorsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const char * const names[] = {
    "color_values"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const test::Colors *GetColors(const void *buf) {
  return flatbuffers::GetRoot<test::Colors>(buf);
}

inline const test::Colors *GetSizePrefixedColors(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<test::Colors>(buf);
}

inline bool VerifyColorsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test::Colors>(nullptr);
}

inline bool VerifySizePrefixedColorsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test::Colors>(nullptr);
}

inline void FinishColorsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::Colors> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedColorsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::Colors> root) {
  fbb.FinishSizePrefixed(root);
}

inline flatbuffers::unique_ptr<ColorsT> UnPackColors(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return flatbuffers::unique_ptr<ColorsT>(GetColors(buf)->UnPack(res));
}

}  // namespace test

#endif  // FLATBUFFERS_GENERATED_TEST_TEST_H_
